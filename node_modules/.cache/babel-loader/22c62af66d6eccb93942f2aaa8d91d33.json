{"ast":null,"code":"var _jsxFileName = \"/Users/jordanflores/Documents/react/react-final-project/react-final-project/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Spotify from \"spotify-web-api-js\";\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: false,\n      devices: [],\n      songs: [],\n      search: \"\",\n      currentDevice: \"\"\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (window.location.hash) {\n      // Remove the \"#\"\n      const queryString = window.location.hash.substring(1); // Parse the access_token out\n\n      const accessToken = new URLSearchParams(queryString).get(\"access_token\");\n      this.spotifyClient = new Spotify();\n      this.spotifyClient.setAccessToken(accessToken);\n\n      const _ref = await this.spotifyClient.getMyDevices(),\n            devices = _ref.devices; // const devices = Object.keys(devicesResp).map(key => devicesResp[key]);\n\n\n      this.setState({\n        authenticated: true,\n        devices,\n        currentDevice: devices[0].id\n      });\n    }\n  }\n\n  async startPlayback(songId) {\n    await this.spotifyClient.play({\n      device_id: this.state.currentDevice,\n      uris: [\"spotify:track:\".concat(songId)]\n    });\n  }\n\n  async onSubmit(ev) {\n    ev.preventDefault();\n\n    const _ref2 = await this.spotifyClient.searchTracks(this.state.search, {\n      market: \"us\"\n    }),\n          songs = _ref2.tracks.items;\n\n    this.setState({\n      songs\n    });\n  }\n\n  render() {\n    if (!this.state.authenticated) {\n      return React.createElement(\"a\", {\n        href: \"https://accounts.spotify.com/authorize/?client_id=8cd26c63ef1a43529fa5ff13fc7dcb09&response_type=token&redirect_uri=\".concat(window.location.origin + window.location.pathname, \"&scope=user-read-playback-state user-modify-playback-state user-top-read user-read-private\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Login with Spotify\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ui container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"ui form\",\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        search: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ui container six column grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.songs.map(song => React.createElement(\"div\", {\n      className: \"ui one column card\",\n      key: song.id,\n      onClick: e => this.startPlayback(song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: song.album.images[0].url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, song.name), React.createElement(\"div\", {\n      className: \"meta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, song.artists.map(artist => artist.name).join(\", \"))))))), React.createElement(\"select\", {\n      className: \"ui dropdown\",\n      onChange: e => this.setState({\n        currentDevice: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.devices.map(device => React.createElement(\"option\", {\n      value: device.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, device.name))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jordanflores/Documents/react/react-final-project/react-final-project/src/App.js"],"names":["React","ReactDOM","Spotify","App","Component","constructor","props","state","authenticated","devices","songs","search","currentDevice","onSubmit","bind","componentDidMount","window","location","hash","queryString","substring","accessToken","URLSearchParams","get","spotifyClient","setAccessToken","getMyDevices","setState","id","startPlayback","songId","play","device_id","uris","ev","preventDefault","searchTracks","market","tracks","items","render","origin","pathname","e","target","value","map","song","album","images","url","name","artists","artist","join","device"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Spotify from \"spotify-web-api-js\";\n\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: false,\n      devices: [],\n      songs: [],\n      search: \"\",\n      currentDevice: \"\"\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (window.location.hash) {\n      // Remove the \"#\"\n      const queryString = window.location.hash.substring(1);\n      // Parse the access_token out\n      const accessToken = new URLSearchParams(queryString).get(\"access_token\");\n      this.spotifyClient = new Spotify();\n      this.spotifyClient.setAccessToken(accessToken);\n\n      const { devices } = await this.spotifyClient.getMyDevices();\n      // const devices = Object.keys(devicesResp).map(key => devicesResp[key]);\n      this.setState({\n        authenticated: true,\n        devices,\n        currentDevice: devices[0].id\n      });\n    }\n  }\n\n  async startPlayback(songId) {\n    await this.spotifyClient.play({\n      device_id: this.state.currentDevice,\n      uris: [`spotify:track:${songId}`]\n    });\n  }\n\n  async onSubmit(ev) {\n    ev.preventDefault();\n    const {\n      tracks: { items: songs }\n    } = await this.spotifyClient.searchTracks(this.state.search, {\n      market: \"us\"\n    });\n    this.setState({ songs });\n  }\n\n  render() {\n    if (!this.state.authenticated) {\n      return (\n        <a\n          href={`https://accounts.spotify.com/authorize/?client_id=8cd26c63ef1a43529fa5ff13fc7dcb09&response_type=token&redirect_uri=${window\n            .location.origin +\n            window.location\n              .pathname}&scope=user-read-playback-state user-modify-playback-state user-top-read user-read-private`}\n        >\n          Login with Spotify\n        </a>\n      );\n    }\n    return (\n      <div className=\"ui container\">\n        <form className=\"ui form\" onSubmit={this.onSubmit}>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ search: e.target.value })}\n          />\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n        <div className=\"ui container six column grid\">\n          {this.state.songs.map(song => (\n            <div\n              className=\"ui one column card\"\n              key={song.id}\n              onClick={e => this.startPlayback(song.id)}\n            >\n              <div className=\"image\">\n                <img src={song.album.images[0].url} />\n              </div>\n              <div className=\"content\">\n                <p className=\"header\">{song.name}</p>\n                <div className=\"meta\">\n                  <span className=\"date\">\n                    {song.artists.map(artist => artist.name).join(\", \")}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <select\n          className=\"ui dropdown\"\n          onChange={e => this.setState({ currentDevice: e.target.value })}\n        >\n          {this.state.devices.map(device => (\n            <option value={device.id}>{device.name}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}